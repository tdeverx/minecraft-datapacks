name: build-package.yml

on:
  push:
    branches:
      - main
    tags:
      - v*
      - Release
      - Pre-Release
      - Build
      - Test
  workflow_dispatch:

jobs:
  check:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3

      -  name: Extract tags
         run: |
          COMMIT_MESSAGE="${{ github.event.head_commit.message }}"
          echo "COMMIT_MESSAGE=${COMMIT_MESSAGE}" >> $GITHUB_ENV
          if [[ "${COMMIT_MESSAGE}" =~ ^(Release|Pre-Release|Build|Test):\ (.+)\ v(.+)$ ]]; then
             echo "TAG_PREFIX=${BASH_REMATCH[1]}" >> $GITHUB_ENV
             echo "VERSION_NUMBER=${BASH_REMATCH[3]}" >> $GITHUB_ENV
             PROJECT_NAME="${BASH_REMATCH[2]}"
             PROJECT_NAME=${PROJECT_NAME,,}
             PROJECT_NAME=${PROJECT_NAME// /-}
             echo "PROJECT_NAME=${PROJECT_NAME}" >> $GITHUB_ENV
          else
            echo "Invalid commit message format"
            exit 1
          fi
           
      -   name: Check tags
          run: |
            TAG_PREFIX="${TAG_PREFIX}"
            if [[ "${TAG_PREFIX}" == "Release" || "${TAG_PREFIX}" == "Pre-Release" ]]; then
              echo "TAGS_PRESENT=true" >> $GITHUB_ENV
            else
              echo "TAGS_PRESENT=false" >> $GITHUB_ENV
              echo "Tags are not present in the commit message"
              exit 1
            fi

  build:
    runs-on: ubuntu-latest
    if: success()
    needs: check
    steps:
      - uses: actions/checkout@v3

      - name: Archive Release
        uses: thedoctor0/zip-release@0.7.1
        with:
          path: ${{ env.PROJECT_NAME }}/
          type: zip
          filename: ${{ env.PROJECT_NAME }}-${{ env.VERSION_NUMBER }}.zip
          exclusions: '*.git* /*node_modules/* .editorconfig'

  upload:
    runs-on: ubuntu-latest
    if: success()
    needs: build
    steps:
      - uses: actions/checkout@v3

      - name: Upload Artifact
        if: ${{ env.TAGS_PRESENT == 'true' }}
        uses: actions/upload-artifact@v2
        with:
          name: release-artifact
          path: ${{ env.PROJECT_NAME }}-${{ env.VERSION_NUMBER }}.zip

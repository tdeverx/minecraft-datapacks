name: build-package.yml

on:
  push:
    branches:
      - main
    tags:
      - v*
      - Release
      - Pre-Release
      - Build
      - Test
  workflow_dispatch:

jobs:
  check:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3

      - name: Extract commit message
        run: |
          COMMIT_MESSAGE="${{ github.event.head_commit.message }}"
          echo "COMMIT_MESSAGE=${COMMIT_MESSAGE}" >> $GITHUB_ENV

      -  name: Check tags
         run: |
           if [[ "${COMMIT_MESSAGE}" =~ ^Release|Pre-Release|Build|Test:\ .+\ v.+ ]]; then
             echo "TAGS_PRESENT=true" >> $GITHUB_ENV
           else
             echo "TAGS_PRESENT=false" >> $GITHUB_ENV
             echo "Tags are not present in the commit message"
             exit 1
           fi

      - name: Get project name
        run: |
          # Extract project name from repository context
          PROJECT_NAME=${{ github.repository }}

          # Format project name
          PROJECT_NAME=${PROJECT_NAME,,}   # Convert to lowercase
          PROJECT_NAME=${PROJECT_NAME// /-} # Replace spaces with hyphens

          # Set environment variable
          echo "FORMATTED_PROJECT_NAME=${PROJECT_NAME}" >> $GITHUB_ENV

      - name: Extract version number
        run: |
          # Extract version number from commit message
          if [[ ${{ env.COMMIT_MESSAGE }} =~ ^Release:\ (.+)\ v(.+)$ ]]; then
            echo "VERSION_NUMBER=${BASH_REMATCH[2]}" >> $GITHUB_ENV
          else
            echo "Invalid commit message format"
            exit 1
          fi

  build:
    runs-on: ubuntu-latest
    if: success()
    needs: check
    steps:
      - uses: actions/checkout@v3

      - name: Archive Release
        uses: thedoctor0/zip-release@0.7.1
        with:
          path: ${{ env.FORMATTED_PROJECT_NAME }}/
          type: zip
          filename: ${{ env.FORMATTED_PROJECT_NAME }}-${{ env.VERSION_NUMBER }}.zip
          exclusions: '*.git* /*node_modules/* .editorconfig'

  upload:
    runs-on: ubuntu-latest
    if: success()
    needs: build
    steps:
      - uses: actions/checkout@v3

      - name: Upload Artifact
        if: ${{ env.TAGS_PRESENT == 'true' && (contains(needs.check.outputs.COMMIT_MESSAGE, 'Release') || contains(needs.check.outputs.COMMIT_MESSAGE, 'Pre-Release')) }}
        uses: actions/upload-artifact@v2
        with:
          name: release-artifact
          path: ${{ env.FORMATTED_PROJECT_NAME }}-${{ env.VERSION_NUMBER }}.zip
